"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VersionCheckTTL = void 0;
exports.displayVersion = displayVersion;
exports.isDeveloperBuild = isDeveloperBuild;
exports.versionNumber = versionNumber;
exports.latestVersionIfHigher = latestVersionIfHigher;
exports.displayVersionMessage = displayVersionMessage;
/* istanbul ignore file */
const path = require("path");
const chalk = require("chalk");
const fs = require("fs-extra");
const semver = require("semver");
const logging_1 = require("../logging");
const error_1 = require("../toolkit/error");
const util_1 = require("../util");
const root_dir_1 = require("./root-dir");
const console_formatters_1 = require("./util/console-formatters");
const npm_1 = require("./util/npm");
const ONE_DAY_IN_SECONDS = 1 * 24 * 60 * 60;
const UPGRADE_DOCUMENTATION_LINKS = {
    1: 'https://docs.aws.amazon.com/cdk/v2/guide/migrating-v2.html',
};
function displayVersion() {
    return `${versionNumber()} (build ${commit()})`;
}
function isDeveloperBuild() {
    return versionNumber() === '0.0.0';
}
function versionNumber() {
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    return require(path.join((0, root_dir_1.cliRootDir)(), 'package.json')).version.replace(/\+[0-9a-f]+$/, '');
}
function commit() {
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    return require(path.join((0, root_dir_1.cliRootDir)(), 'build-info.json')).commit;
}
class VersionCheckTTL {
    static timestampFilePath() {
        // Using the same path from account-cache.ts
        return path.join((0, util_1.cdkCacheDir)(), 'repo-version-ttl');
    }
    constructor(file, ttlSecs) {
        this.file = file || VersionCheckTTL.timestampFilePath();
        try {
            fs.mkdirsSync(path.dirname(this.file));
            fs.accessSync(path.dirname(this.file), fs.constants.W_OK);
        }
        catch {
            throw new error_1.ToolkitError(`Directory (${path.dirname(this.file)}) is not writable.`);
        }
        this.ttlSecs = ttlSecs || ONE_DAY_IN_SECONDS;
    }
    async hasExpired() {
        try {
            const lastCheckTime = (await fs.stat(this.file)).mtimeMs;
            const today = new Date().getTime();
            if ((today - lastCheckTime) / 1000 > this.ttlSecs) { // convert ms to sec
                return true;
            }
            return false;
        }
        catch (err) {
            if (err.code === 'ENOENT') {
                return true;
            }
            else {
                throw err;
            }
        }
    }
    async update(latestVersion) {
        if (!latestVersion) {
            latestVersion = '';
        }
        await fs.writeFile(this.file, latestVersion);
    }
}
exports.VersionCheckTTL = VersionCheckTTL;
// Export for unit testing only.
// Don't use directly, use displayVersionMessage() instead.
async function latestVersionIfHigher(currentVersion, cacheFile) {
    if (!(await cacheFile.hasExpired())) {
        return null;
    }
    const latestVersion = await (0, npm_1.getLatestVersionFromNpm)();
    const isNewer = semver.gt(latestVersion, currentVersion);
    await cacheFile.update(latestVersion);
    if (isNewer) {
        return latestVersion;
    }
    else {
        return null;
    }
}
function getMajorVersionUpgradeMessage(currentVersion) {
    const currentMajorVersion = semver.major(currentVersion);
    if (UPGRADE_DOCUMENTATION_LINKS[currentMajorVersion]) {
        return `Information about upgrading from version ${currentMajorVersion}.x to version ${currentMajorVersion + 1}.x is available here: ${UPGRADE_DOCUMENTATION_LINKS[currentMajorVersion]}`;
    }
}
function getVersionMessage(currentVersion, laterVersion) {
    return [
        `Newer version of CDK is available [${chalk.green(laterVersion)}]`,
        getMajorVersionUpgradeMessage(currentVersion),
        'Upgrade recommended (npm install -g aws-cdk)',
    ].filter(Boolean);
}
async function displayVersionMessage(currentVersion = versionNumber(), versionCheckCache) {
    if (!process.stdout.isTTY || process.env.CDK_DISABLE_VERSION_CHECK) {
        return;
    }
    try {
        const laterVersion = await latestVersionIfHigher(currentVersion, versionCheckCache !== null && versionCheckCache !== void 0 ? versionCheckCache : new VersionCheckTTL());
        if (laterVersion) {
            const bannerMsg = (0, console_formatters_1.formatAsBanner)(getVersionMessage(currentVersion, laterVersion));
            bannerMsg.forEach((e) => (0, logging_1.info)(e));
        }
    }
    catch (err) {
        (0, logging_1.debug)(`Could not run version check - ${err.message}`);
    }
}
//# sourceMappingURL=data:application/json;base64,