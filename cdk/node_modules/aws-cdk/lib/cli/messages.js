"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trace = exports.debug = exports.info = exports.warn = exports.result = exports.error = void 0;
exports.formatMessage = formatMessage;
/**
 * Internal helper that processes log inputs into a consistent format.
 * Handles string interpolation, format strings, and object parameter styles.
 * Applies optional styling and prepares the final message for logging.
 */
function formatMessage(msg, category = 'TOOLKIT') {
    var _a;
    return {
        time: new Date(),
        level: msg.level,
        code: (_a = msg.code) !== null && _a !== void 0 ? _a : defaultMessageCode(msg.level, category),
        message: msg.message,
        data: msg.data,
    };
}
/**
 * Build a message code from level and category. The code must be valid for this function to pass.
 * Otherwise it returns a ToolkitError.
 */
function defaultMessageCode(level, category = 'TOOLKIT') {
    const levelIndicator = level === 'error' ? 'E' :
        level === 'warn' ? 'W' :
            'I';
    return `CDK_${category}_${levelIndicator}0000`;
}
/**
 * Creates an error level message.
 * Errors must always have a unique code.
 */
const error = (message, code, payload) => {
    return formatMessage({
        level: 'error',
        code,
        message,
        data: payload,
    });
};
exports.error = error;
/**
 * Creates a result level message and represents the most important message for a given action.
 *
 * They should be used sparsely, with an action usually having no or exactly one result.
 * However actions that operate on Cloud Assemblies might include a result per Stack.
 * Unlike other messages, results must always have a code and a payload.
 */
const result = (message, code, payload) => {
    return formatMessage({
        level: 'result',
        code,
        message,
        data: payload,
    });
};
exports.result = result;
/**
 * Creates a warning level message.
 */
const warn = (message, code, payload) => {
    return formatMessage({
        level: 'warn',
        code,
        message,
        data: payload,
    });
};
exports.warn = warn;
/**
 * Creates an info level message.
 */
const info = (message, code, payload) => {
    return formatMessage({
        level: 'info',
        code,
        message,
        data: payload,
    });
};
exports.info = info;
/**
 * Creates a debug level message.
 */
const debug = (message, code, payload) => {
    return formatMessage({
        level: 'debug',
        code,
        message,
        data: payload,
    });
};
exports.debug = debug;
/**
 * Creates a trace level message.
 */
const trace = (message, code, payload) => {
    return formatMessage({
        level: 'trace',
        code,
        message,
        data: payload,
    });
};
exports.trace = trace;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtZXNzYWdlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFnQkEsc0NBUUM7QUFiRDs7OztHQUlHO0FBQ0gsU0FBZ0IsYUFBYSxDQUFJLEdBQTJDLEVBQUUsV0FBa0MsU0FBUzs7SUFDdkgsT0FBTztRQUNMLElBQUksRUFBRSxJQUFJLElBQUksRUFBRTtRQUNoQixLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUs7UUFDaEIsSUFBSSxFQUFFLE1BQUEsR0FBRyxDQUFDLElBQUksbUNBQUksa0JBQWtCLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUM7UUFDekQsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPO1FBQ3BCLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTtLQUNmLENBQUM7QUFDSixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBUyxrQkFBa0IsQ0FBQyxLQUFxQixFQUFFLFdBQWtDLFNBQVM7SUFDNUYsTUFBTSxjQUFjLEdBQUcsS0FBSyxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUMsS0FBSyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEIsR0FBRyxDQUFDO0lBQ1IsT0FBTyxPQUFPLFFBQVEsSUFBSSxjQUFjLE1BQU0sQ0FBQztBQUNqRCxDQUFDO0FBRUQ7OztHQUdHO0FBQ0ksTUFBTSxLQUFLLEdBQUcsQ0FBSSxPQUFlLEVBQUUsSUFBbUIsRUFBRSxPQUFXLEVBQUUsRUFBRTtJQUM1RSxPQUFPLGFBQWEsQ0FBQztRQUNuQixLQUFLLEVBQUUsT0FBTztRQUNkLElBQUk7UUFDSixPQUFPO1FBQ1AsSUFBSSxFQUFFLE9BQU87S0FDZCxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFQVyxRQUFBLEtBQUssU0FPaEI7QUFFRjs7Ozs7O0dBTUc7QUFDSSxNQUFNLE1BQU0sR0FBRyxDQUFJLE9BQWUsRUFBRSxJQUFtQixFQUFFLE9BQVUsRUFBRSxFQUFFO0lBQzVFLE9BQU8sYUFBYSxDQUFDO1FBQ25CLEtBQUssRUFBRSxRQUFRO1FBQ2YsSUFBSTtRQUNKLE9BQU87UUFDUCxJQUFJLEVBQUUsT0FBTztLQUNkLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQVBXLFFBQUEsTUFBTSxVQU9qQjtBQUVGOztHQUVHO0FBQ0ksTUFBTSxJQUFJLEdBQUcsQ0FBSSxPQUFlLEVBQUUsSUFBb0IsRUFBRSxPQUFXLEVBQUUsRUFBRTtJQUM1RSxPQUFPLGFBQWEsQ0FBQztRQUNuQixLQUFLLEVBQUUsTUFBTTtRQUNiLElBQUk7UUFDSixPQUFPO1FBQ1AsSUFBSSxFQUFFLE9BQU87S0FDZCxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFQVyxRQUFBLElBQUksUUFPZjtBQUVGOztHQUVHO0FBQ0ksTUFBTSxJQUFJLEdBQUcsQ0FBSSxPQUFlLEVBQUUsSUFBb0IsRUFBRSxPQUFXLEVBQUUsRUFBRTtJQUM1RSxPQUFPLGFBQWEsQ0FBQztRQUNuQixLQUFLLEVBQUUsTUFBTTtRQUNiLElBQUk7UUFDSixPQUFPO1FBQ1AsSUFBSSxFQUFFLE9BQU87S0FDZCxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFQVyxRQUFBLElBQUksUUFPZjtBQUVGOztHQUVHO0FBQ0ksTUFBTSxLQUFLLEdBQUcsQ0FBSSxPQUFlLEVBQUUsSUFBb0IsRUFBRSxPQUFXLEVBQUUsRUFBRTtJQUM3RSxPQUFPLGFBQWEsQ0FBQztRQUNuQixLQUFLLEVBQUUsT0FBTztRQUNkLElBQUk7UUFDSixPQUFPO1FBQ1AsSUFBSSxFQUFFLE9BQU87S0FDZCxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFQVyxRQUFBLEtBQUssU0FPaEI7QUFFRjs7R0FFRztBQUNJLE1BQU0sS0FBSyxHQUFHLENBQUksT0FBZSxFQUFFLElBQW9CLEVBQUUsT0FBVyxFQUFFLEVBQUU7SUFDN0UsT0FBTyxhQUFhLENBQUM7UUFDbkIsS0FBSyxFQUFFLE9BQU87UUFDZCxJQUFJO1FBQ0osT0FBTztRQUNQLElBQUksRUFBRSxPQUFPO0tBQ2QsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBUFcsUUFBQSxLQUFLLFNBT2hCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBmaWxlIGlzIGEgYmFja3BvcnQgZnJvbSBAYXdzLWNkay90b29sa2l0LlxuLy8gVGhlIENMSSBjYW5ub3QgZGVwZW5kIG9uIHRoZSB0b29sa2l0IHlldCwgYmVjYXVzZSB0aGUgdG9vbGtpdCBjdXJyZW50bHkgZGVwZW5kcyBvbiB0aGUgQ0xJLlxuLy8gT25jZSB3ZSBoYXZlIGNvbXBsZXRlIHRoZSByZXBvIHNwbGl0LCB3ZSB3aWxsIGNyZWF0ZSBhIHRlbXBvcmFyeSwgcHJpdmF0ZSBsaWJyYXJ5IHBhY2thZ2Vcbi8vIGZvciBhbGwgY29kZSB0aGF0IGlzIHNoYXJlZCBiZXR3ZWVuIENMSSBhbmQgdG9vbGtpdC4gVGhpcyBpcyB3aGVyZSB0aGlzIGZpbGUgd2lsbCB0aGVuIGxpdmUuXG5pbXBvcnQgdHlwZSB7IEFjdGlvbkxlc3NNZXNzYWdlIH0gZnJvbSAnLi4vLi4vLi4vQGF3cy1jZGsvdG1wLXRvb2xraXQtaGVscGVycy9zcmMvYXBpL2lvL3ByaXZhdGUnO1xuaW1wb3J0IHR5cGUgeyBJb01lc3NhZ2VDb2RlQ2F0ZWdvcnkgfSBmcm9tICcuLi9sb2dnaW5nJztcbmltcG9ydCB0eXBlIHsgSW9NZXNzYWdlQ29kZSwgSW9NZXNzYWdlTGV2ZWwgfSBmcm9tICcuLi90b29sa2l0L2NsaS1pby1ob3N0JztcblxudHlwZSBPcHRpb25hbDxULCBLIGV4dGVuZHMga2V5b2YgVD4gPSBQaWNrPFBhcnRpYWw8VD4sIEs+ICYgT21pdDxULCBLPjtcbnR5cGUgU2ltcGxpZmllZE1lc3NhZ2U8VD4gPSBPbWl0PEFjdGlvbkxlc3NNZXNzYWdlPFQ+LCAndGltZSc+O1xuXG4vKipcbiAqIEludGVybmFsIGhlbHBlciB0aGF0IHByb2Nlc3NlcyBsb2cgaW5wdXRzIGludG8gYSBjb25zaXN0ZW50IGZvcm1hdC5cbiAqIEhhbmRsZXMgc3RyaW5nIGludGVycG9sYXRpb24sIGZvcm1hdCBzdHJpbmdzLCBhbmQgb2JqZWN0IHBhcmFtZXRlciBzdHlsZXMuXG4gKiBBcHBsaWVzIG9wdGlvbmFsIHN0eWxpbmcgYW5kIHByZXBhcmVzIHRoZSBmaW5hbCBtZXNzYWdlIGZvciBsb2dnaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZTxUPihtc2c6IE9wdGlvbmFsPFNpbXBsaWZpZWRNZXNzYWdlPFQ+LCAnY29kZSc+LCBjYXRlZ29yeTogSW9NZXNzYWdlQ29kZUNhdGVnb3J5ID0gJ1RPT0xLSVQnKTogQWN0aW9uTGVzc01lc3NhZ2U8VD4ge1xuICByZXR1cm4ge1xuICAgIHRpbWU6IG5ldyBEYXRlKCksXG4gICAgbGV2ZWw6IG1zZy5sZXZlbCxcbiAgICBjb2RlOiBtc2cuY29kZSA/PyBkZWZhdWx0TWVzc2FnZUNvZGUobXNnLmxldmVsLCBjYXRlZ29yeSksXG4gICAgbWVzc2FnZTogbXNnLm1lc3NhZ2UsXG4gICAgZGF0YTogbXNnLmRhdGEsXG4gIH07XG59XG5cbi8qKlxuICogQnVpbGQgYSBtZXNzYWdlIGNvZGUgZnJvbSBsZXZlbCBhbmQgY2F0ZWdvcnkuIFRoZSBjb2RlIG11c3QgYmUgdmFsaWQgZm9yIHRoaXMgZnVuY3Rpb24gdG8gcGFzcy5cbiAqIE90aGVyd2lzZSBpdCByZXR1cm5zIGEgVG9vbGtpdEVycm9yLlxuICovXG5mdW5jdGlvbiBkZWZhdWx0TWVzc2FnZUNvZGUobGV2ZWw6IElvTWVzc2FnZUxldmVsLCBjYXRlZ29yeTogSW9NZXNzYWdlQ29kZUNhdGVnb3J5ID0gJ1RPT0xLSVQnKTogSW9NZXNzYWdlQ29kZSB7XG4gIGNvbnN0IGxldmVsSW5kaWNhdG9yID0gbGV2ZWwgPT09ICdlcnJvcicgPyAnRScgOlxuICAgIGxldmVsID09PSAnd2FybicgPyAnVycgOlxuICAgICAgJ0knO1xuICByZXR1cm4gYENES18ke2NhdGVnb3J5fV8ke2xldmVsSW5kaWNhdG9yfTAwMDBgO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gZXJyb3IgbGV2ZWwgbWVzc2FnZS5cbiAqIEVycm9ycyBtdXN0IGFsd2F5cyBoYXZlIGEgdW5pcXVlIGNvZGUuXG4gKi9cbmV4cG9ydCBjb25zdCBlcnJvciA9IDxUPihtZXNzYWdlOiBzdHJpbmcsIGNvZGU6IElvTWVzc2FnZUNvZGUsIHBheWxvYWQ/OiBUKSA9PiB7XG4gIHJldHVybiBmb3JtYXRNZXNzYWdlKHtcbiAgICBsZXZlbDogJ2Vycm9yJyxcbiAgICBjb2RlLFxuICAgIG1lc3NhZ2UsXG4gICAgZGF0YTogcGF5bG9hZCxcbiAgfSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSByZXN1bHQgbGV2ZWwgbWVzc2FnZSBhbmQgcmVwcmVzZW50cyB0aGUgbW9zdCBpbXBvcnRhbnQgbWVzc2FnZSBmb3IgYSBnaXZlbiBhY3Rpb24uXG4gKlxuICogVGhleSBzaG91bGQgYmUgdXNlZCBzcGFyc2VseSwgd2l0aCBhbiBhY3Rpb24gdXN1YWxseSBoYXZpbmcgbm8gb3IgZXhhY3RseSBvbmUgcmVzdWx0LlxuICogSG93ZXZlciBhY3Rpb25zIHRoYXQgb3BlcmF0ZSBvbiBDbG91ZCBBc3NlbWJsaWVzIG1pZ2h0IGluY2x1ZGUgYSByZXN1bHQgcGVyIFN0YWNrLlxuICogVW5saWtlIG90aGVyIG1lc3NhZ2VzLCByZXN1bHRzIG11c3QgYWx3YXlzIGhhdmUgYSBjb2RlIGFuZCBhIHBheWxvYWQuXG4gKi9cbmV4cG9ydCBjb25zdCByZXN1bHQgPSA8VD4obWVzc2FnZTogc3RyaW5nLCBjb2RlOiBJb01lc3NhZ2VDb2RlLCBwYXlsb2FkOiBUKSA9PiB7XG4gIHJldHVybiBmb3JtYXRNZXNzYWdlKHtcbiAgICBsZXZlbDogJ3Jlc3VsdCcsXG4gICAgY29kZSxcbiAgICBtZXNzYWdlLFxuICAgIGRhdGE6IHBheWxvYWQsXG4gIH0pO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgd2FybmluZyBsZXZlbCBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3Qgd2FybiA9IDxUPihtZXNzYWdlOiBzdHJpbmcsIGNvZGU/OiBJb01lc3NhZ2VDb2RlLCBwYXlsb2FkPzogVCkgPT4ge1xuICByZXR1cm4gZm9ybWF0TWVzc2FnZSh7XG4gICAgbGV2ZWw6ICd3YXJuJyxcbiAgICBjb2RlLFxuICAgIG1lc3NhZ2UsXG4gICAgZGF0YTogcGF5bG9hZCxcbiAgfSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gaW5mbyBsZXZlbCBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgaW5mbyA9IDxUPihtZXNzYWdlOiBzdHJpbmcsIGNvZGU/OiBJb01lc3NhZ2VDb2RlLCBwYXlsb2FkPzogVCkgPT4ge1xuICByZXR1cm4gZm9ybWF0TWVzc2FnZSh7XG4gICAgbGV2ZWw6ICdpbmZvJyxcbiAgICBjb2RlLFxuICAgIG1lc3NhZ2UsXG4gICAgZGF0YTogcGF5bG9hZCxcbiAgfSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkZWJ1ZyBsZXZlbCBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgZGVidWcgPSA8VD4obWVzc2FnZTogc3RyaW5nLCBjb2RlPzogSW9NZXNzYWdlQ29kZSwgcGF5bG9hZD86IFQpID0+IHtcbiAgcmV0dXJuIGZvcm1hdE1lc3NhZ2Uoe1xuICAgIGxldmVsOiAnZGVidWcnLFxuICAgIGNvZGUsXG4gICAgbWVzc2FnZSxcbiAgICBkYXRhOiBwYXlsb2FkLFxuICB9KTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRyYWNlIGxldmVsIG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCB0cmFjZSA9IDxUPihtZXNzYWdlOiBzdHJpbmcsIGNvZGU/OiBJb01lc3NhZ2VDb2RlLCBwYXlsb2FkPzogVCkgPT4ge1xuICByZXR1cm4gZm9ybWF0TWVzc2FnZSh7XG4gICAgbGV2ZWw6ICd0cmFjZScsXG4gICAgY29kZSxcbiAgICBtZXNzYWdlLFxuICAgIGRhdGE6IHBheWxvYWQsXG4gIH0pO1xufTtcblxuIl19