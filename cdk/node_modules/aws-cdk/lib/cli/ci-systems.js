"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectCiSystem = detectCiSystem;
exports.ciSystemIsStdErrSafe = ciSystemIsStdErrSafe;
const CI_SYSTEMS = [
    {
        name: 'Azure DevOps',
        // https://learn.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml
        detectEnvVar: 'TF_BUILD',
        canBeConfiguredToFailOnStdErr: true,
    },
    {
        name: 'TeamCity',
        // https://www.jetbrains.com/help/teamcity/predefined-build-parameters.html
        detectEnvVar: 'TEAMCITY_VERSION',
        // Can be configured to fail on stderr, when using a PowerShell task
        canBeConfiguredToFailOnStdErr: true,
    },
    {
        name: 'GitHub Actions',
        // https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables#default-environment-variables
        detectEnvVar: 'GITHUB_ACTION',
        canBeConfiguredToFailOnStdErr: false,
    },
    {
        name: 'CodeBuild',
        // https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html
        detectEnvVar: 'CODEBUILD_BUILD_ID',
        canBeConfiguredToFailOnStdErr: false,
    },
    {
        name: 'CircleCI',
        // https://circleci.com/docs/variables/#built-in-environment-variables
        detectEnvVar: 'CIRCLECI',
        canBeConfiguredToFailOnStdErr: false,
    },
    {
        name: 'Jenkins',
        // https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#using-environment-variables
        detectEnvVar: 'EXECUTOR_NUMBER',
        canBeConfiguredToFailOnStdErr: false,
    },
];
function detectCiSystem() {
    for (const ciSystem of CI_SYSTEMS) {
        if (process.env[ciSystem.detectEnvVar]) {
            return ciSystem;
        }
    }
    return undefined;
}
/**
 * Return whether the CI system we're detecting is safe to write to stderr on
 *
 * Returns `undefined` if the current CI system cannot be recognized.
 */
function ciSystemIsStdErrSafe() {
    var _a;
    const x = (_a = detectCiSystem()) === null || _a === void 0 ? void 0 : _a.canBeConfiguredToFailOnStdErr;
    return x === undefined ? undefined : !x;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2ktc3lzdGVtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNpLXN5c3RlbXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFnRUEsd0NBT0M7QUFPRCxvREFHQztBQXpERCxNQUFNLFVBQVUsR0FBZTtJQUM3QjtRQUNFLElBQUksRUFBRSxjQUFjO1FBQ3BCLHVHQUF1RztRQUN2RyxZQUFZLEVBQUUsVUFBVTtRQUN4Qiw2QkFBNkIsRUFBRSxJQUFJO0tBQ3BDO0lBQ0Q7UUFDRSxJQUFJLEVBQUUsVUFBVTtRQUNoQiwyRUFBMkU7UUFDM0UsWUFBWSxFQUFFLGtCQUFrQjtRQUNoQyxvRUFBb0U7UUFDcEUsNkJBQTZCLEVBQUUsSUFBSTtLQUNwQztJQUNEO1FBQ0UsSUFBSSxFQUFFLGdCQUFnQjtRQUN0QixxSkFBcUo7UUFDckosWUFBWSxFQUFFLGVBQWU7UUFDN0IsNkJBQTZCLEVBQUUsS0FBSztLQUNyQztJQUNEO1FBQ0UsSUFBSSxFQUFFLFdBQVc7UUFDakIscUZBQXFGO1FBQ3JGLFlBQVksRUFBRSxvQkFBb0I7UUFDbEMsNkJBQTZCLEVBQUUsS0FBSztLQUNyQztJQUNEO1FBQ0UsSUFBSSxFQUFFLFVBQVU7UUFDaEIsc0VBQXNFO1FBQ3RFLFlBQVksRUFBRSxVQUFVO1FBQ3hCLDZCQUE2QixFQUFFLEtBQUs7S0FDckM7SUFDRDtRQUNFLElBQUksRUFBRSxTQUFTO1FBQ2Ysb0ZBQW9GO1FBQ3BGLFlBQVksRUFBRSxpQkFBaUI7UUFDL0IsNkJBQTZCLEVBQUUsS0FBSztLQUNyQztDQUNGLENBQUM7QUFFRixTQUFnQixjQUFjO0lBQzVCLEtBQUssTUFBTSxRQUFRLElBQUksVUFBVSxFQUFFLENBQUM7UUFDbEMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDO1lBQ3ZDLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUM7SUFDSCxDQUFDO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQixvQkFBb0I7O0lBQ2xDLE1BQU0sQ0FBQyxHQUFHLE1BQUEsY0FBYyxFQUFFLDBDQUFFLDZCQUE2QixDQUFDO0lBQzFELE9BQU8sQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW50ZXJmYWNlIENpU3lzdGVtIHtcbiAgLyoqXG4gICAqIFdoYXQncyB0aGUgbmFtZT9cbiAgICovXG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogV2hhdCBlbnZpcm9ubWVudCB2YXJpYWJsZSBpbmRpY2F0ZXMgdGhhdCB3ZSBhcmUgcnVubmluZyBvbiB0aGlzIHN5c3RlbT9cbiAgICovXG4gIHJlYWRvbmx5IGRldGVjdEVudlZhcjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0aGlzIENJIHN5c3RlbSBjYW4gYmUgY29uZmlndXJlZCB0byBmYWlsIG9uIG1lc3NhZ2VzIHdyaXR0ZW4gdG8gc3RkZXJyXG4gICAqXG4gICAqIFdpdGggXCJjYW4gYmUgY29uZmlndXJlZFwiLCB3aGF0IHdlIG1lYW4gaXMgdGhhdCBhIGNoZWNrYm94IG9yIGNvbmZpZ3VyYXRpb25cbiAgICogZmxhZyB0byBlbmFibGUgdGhpcyBiZWhhdmlvciBjb21lcyBvdXQgb2YgdGhlIGJveCB3aXRoIHRoZSBDSSBzeXN0ZW0gYW5kIChqdWRnZW1lbnRcbiAgICogY2FsbCksIHRoaXMgZmxhZyBpcyBcImNvbW1vbmx5XCIgdXNlZC5cbiAgICpcbiAgICogT2YgY291cnNlIGV2ZXJ5IENJIHN5c3RlbSBjYW4gYmUgc2NyaXB0ZWQgdG8gaGF2ZSB0aGlzIGJlaGF2aW9yLCBidXQgdGhhdCdzXG4gICAqIG5vdCB3aGF0IHdlIG1lYW4uXG4gICAqL1xuICByZWFkb25seSBjYW5CZUNvbmZpZ3VyZWRUb0ZhaWxPblN0ZEVycjogYm9vbGVhbjtcbn1cblxuY29uc3QgQ0lfU1lTVEVNUzogQ2lTeXN0ZW1bXSA9IFtcbiAge1xuICAgIG5hbWU6ICdBenVyZSBEZXZPcHMnLFxuICAgIC8vIGh0dHBzOi8vbGVhcm4ubWljcm9zb2Z0LmNvbS9lbi11cy9henVyZS9kZXZvcHMvcGlwZWxpbmVzL2J1aWxkL3ZhcmlhYmxlcz92aWV3PWF6dXJlLWRldm9wcyZ0YWJzPXlhbWxcbiAgICBkZXRlY3RFbnZWYXI6ICdURl9CVUlMRCcsXG4gICAgY2FuQmVDb25maWd1cmVkVG9GYWlsT25TdGRFcnI6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnVGVhbUNpdHknLFxuICAgIC8vIGh0dHBzOi8vd3d3LmpldGJyYWlucy5jb20vaGVscC90ZWFtY2l0eS9wcmVkZWZpbmVkLWJ1aWxkLXBhcmFtZXRlcnMuaHRtbFxuICAgIGRldGVjdEVudlZhcjogJ1RFQU1DSVRZX1ZFUlNJT04nLFxuICAgIC8vIENhbiBiZSBjb25maWd1cmVkIHRvIGZhaWwgb24gc3RkZXJyLCB3aGVuIHVzaW5nIGEgUG93ZXJTaGVsbCB0YXNrXG4gICAgY2FuQmVDb25maWd1cmVkVG9GYWlsT25TdGRFcnI6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnR2l0SHViIEFjdGlvbnMnLFxuICAgIC8vIGh0dHBzOi8vZG9jcy5naXRodWIuY29tL2VuL2FjdGlvbnMvd3JpdGluZy13b3JrZmxvd3MvY2hvb3Npbmctd2hhdC15b3VyLXdvcmtmbG93LWRvZXMvc3RvcmUtaW5mb3JtYXRpb24taW4tdmFyaWFibGVzI2RlZmF1bHQtZW52aXJvbm1lbnQtdmFyaWFibGVzXG4gICAgZGV0ZWN0RW52VmFyOiAnR0lUSFVCX0FDVElPTicsXG4gICAgY2FuQmVDb25maWd1cmVkVG9GYWlsT25TdGRFcnI6IGZhbHNlLFxuICB9LFxuICB7XG4gICAgbmFtZTogJ0NvZGVCdWlsZCcsXG4gICAgLy8gaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2NvZGVidWlsZC9sYXRlc3QvdXNlcmd1aWRlL2J1aWxkLWVudi1yZWYtZW52LXZhcnMuaHRtbFxuICAgIGRldGVjdEVudlZhcjogJ0NPREVCVUlMRF9CVUlMRF9JRCcsXG4gICAgY2FuQmVDb25maWd1cmVkVG9GYWlsT25TdGRFcnI6IGZhbHNlLFxuICB9LFxuICB7XG4gICAgbmFtZTogJ0NpcmNsZUNJJyxcbiAgICAvLyBodHRwczovL2NpcmNsZWNpLmNvbS9kb2NzL3ZhcmlhYmxlcy8jYnVpbHQtaW4tZW52aXJvbm1lbnQtdmFyaWFibGVzXG4gICAgZGV0ZWN0RW52VmFyOiAnQ0lSQ0xFQ0knLFxuICAgIGNhbkJlQ29uZmlndXJlZFRvRmFpbE9uU3RkRXJyOiBmYWxzZSxcbiAgfSxcbiAge1xuICAgIG5hbWU6ICdKZW5raW5zJyxcbiAgICAvLyBodHRwczovL3d3dy5qZW5raW5zLmlvL2RvYy9ib29rL3BpcGVsaW5lL2plbmtpbnNmaWxlLyN1c2luZy1lbnZpcm9ubWVudC12YXJpYWJsZXNcbiAgICBkZXRlY3RFbnZWYXI6ICdFWEVDVVRPUl9OVU1CRVInLFxuICAgIGNhbkJlQ29uZmlndXJlZFRvRmFpbE9uU3RkRXJyOiBmYWxzZSxcbiAgfSxcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RDaVN5c3RlbSgpOiBDaVN5c3RlbSB8IHVuZGVmaW5lZCB7XG4gIGZvciAoY29uc3QgY2lTeXN0ZW0gb2YgQ0lfU1lTVEVNUykge1xuICAgIGlmIChwcm9jZXNzLmVudltjaVN5c3RlbS5kZXRlY3RFbnZWYXJdKSB7XG4gICAgICByZXR1cm4gY2lTeXN0ZW07XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogUmV0dXJuIHdoZXRoZXIgdGhlIENJIHN5c3RlbSB3ZSdyZSBkZXRlY3RpbmcgaXMgc2FmZSB0byB3cml0ZSB0byBzdGRlcnIgb25cbiAqXG4gKiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIHRoZSBjdXJyZW50IENJIHN5c3RlbSBjYW5ub3QgYmUgcmVjb2duaXplZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNpU3lzdGVtSXNTdGRFcnJTYWZlKCk6IGJvb2xlYW4gfCB1bmRlZmluZWQge1xuICBjb25zdCB4ID0gZGV0ZWN0Q2lTeXN0ZW0oKT8uY2FuQmVDb25maWd1cmVkVG9GYWlsT25TdGRFcnI7XG4gIHJldHVybiB4ID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiAheDtcbn1cbiJdfQ==