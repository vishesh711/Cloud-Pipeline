"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.provideContextValues = provideContextValues;
exports.registerContextProvider = registerContextProvider;
exports.registerPluginContextProvider = registerPluginContextProvider;
exports.registerContextProviderFactory = registerContextProviderFactory;
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cxapi = require("@aws-cdk/cx-api");
const ami_1 = require("./ami");
const availability_zones_1 = require("./availability-zones");
const cc_api_provider_1 = require("./cc-api-provider");
const endpoint_service_availability_zones_1 = require("./endpoint-service-availability-zones");
const hosted_zones_1 = require("./hosted-zones");
const keys_1 = require("./keys");
const load_balancers_1 = require("./load-balancers");
const security_groups_1 = require("./security-groups");
const ssm_parameters_1 = require("./ssm-parameters");
const vpcs_1 = require("./vpcs");
const context_1 = require("../api/context");
const plugin_1 = require("../api/plugin");
const placeholders_1 = require("../api/util/placeholders");
const logging_1 = require("../logging");
const error_1 = require("../toolkit/error");
const util_1 = require("../util");
const PLUGIN_PROVIDER_PREFIX = 'plugin';
/**
 * Iterate over the list of missing context values and invoke the appropriate providers from the map to retrieve them
 */
async function provideContextValues(missingValues, context, sdk) {
    for (const missingContext of missingValues) {
        const key = missingContext.key;
        const providerName = missingContext.provider === cxschema.ContextProvider.PLUGIN
            ? `${PLUGIN_PROVIDER_PREFIX}:${missingContext.props.pluginName}`
            : missingContext.provider;
        let factory;
        if (providerName.startsWith(`${PLUGIN_PROVIDER_PREFIX}:`)) {
            const plugin = plugin_1.PluginHost.instance.contextProviderPlugins[providerName.substring(PLUGIN_PROVIDER_PREFIX.length + 1)];
            if (!plugin) {
                // eslint-disable-next-line max-len
                throw new error_1.ContextProviderError(`Unrecognized plugin context provider name: ${missingContext.provider}.`);
            }
            factory = () => plugin;
        }
        else {
            factory = availableContextProviders[providerName];
            if (!factory) {
                // eslint-disable-next-line max-len
                throw new error_1.ContextProviderError(`Unrecognized context provider name: ${missingContext.provider}. You might need to update the toolkit to match the version of the construct library.`);
            }
        }
        const provider = factory(sdk);
        let value;
        try {
            const environment = missingContext.props.account && missingContext.props.region
                ? cxapi.EnvironmentUtils.make(missingContext.props.account, missingContext.props.region)
                : undefined;
            const resolvedEnvironment = environment
                ? await sdk.resolveEnvironment(environment)
                : { account: '?', region: '?', name: '?' };
            const arns = await (0, placeholders_1.replaceEnvPlaceholders)({
                lookupRoleArn: missingContext.props.lookupRoleArn,
            }, resolvedEnvironment, sdk);
            value = await provider.getValue({ ...missingContext.props, lookupRoleArn: arns.lookupRoleArn });
        }
        catch (e) {
            // Set a specially formatted provider value which will be interpreted
            // as a lookup failure in the toolkit.
            value = { [cxapi.PROVIDER_ERROR_KEY]: (0, util_1.formatErrorMessage)(e), [context_1.TRANSIENT_CONTEXT_KEY]: true };
        }
        context.set(key, value);
        (0, logging_1.debug)(`Setting "${key}" context to ${JSON.stringify(value)}`);
    }
}
/**
 * Register a context provider
 *
 * A context provider cannot reuse the SDKs authentication mechanisms.
 */
function registerContextProvider(name, provider) {
    availableContextProviders[name] = () => provider;
}
/**
 * Register a plugin context provider
 *
 * A plugin provider cannot reuse the SDKs authentication mechanisms.
 */
function registerPluginContextProvider(name, provider) {
    registerContextProvider(`${PLUGIN_PROVIDER_PREFIX}:${name}`, provider);
}
/**
 * Register a context provider factory
 *
 * A context provider factory takes an SdkProvider and returns the context provider plugin.
 */
function registerContextProviderFactory(name, provider) {
    availableContextProviders[name] = provider;
}
const availableContextProviders = {
    [cxschema.ContextProvider.AVAILABILITY_ZONE_PROVIDER]: (s) => new availability_zones_1.AZContextProviderPlugin(s),
    [cxschema.ContextProvider.SSM_PARAMETER_PROVIDER]: (s) => new ssm_parameters_1.SSMContextProviderPlugin(s),
    [cxschema.ContextProvider.HOSTED_ZONE_PROVIDER]: (s) => new hosted_zones_1.HostedZoneContextProviderPlugin(s),
    [cxschema.ContextProvider.VPC_PROVIDER]: (s) => new vpcs_1.VpcNetworkContextProviderPlugin(s),
    [cxschema.ContextProvider.AMI_PROVIDER]: (s) => new ami_1.AmiContextProviderPlugin(s),
    [cxschema.ContextProvider.ENDPOINT_SERVICE_AVAILABILITY_ZONE_PROVIDER]: (s) => new endpoint_service_availability_zones_1.EndpointServiceAZContextProviderPlugin(s),
    [cxschema.ContextProvider.SECURITY_GROUP_PROVIDER]: (s) => new security_groups_1.SecurityGroupContextProviderPlugin(s),
    [cxschema.ContextProvider.LOAD_BALANCER_PROVIDER]: (s) => new load_balancers_1.LoadBalancerContextProviderPlugin(s),
    [cxschema.ContextProvider.LOAD_BALANCER_LISTENER_PROVIDER]: (s) => new load_balancers_1.LoadBalancerListenerContextProviderPlugin(s),
    [cxschema.ContextProvider.KEY_PROVIDER]: (s) => new keys_1.KeyContextProviderPlugin(s),
    [cxschema.ContextProvider.CC_API_PROVIDER]: (s) => new cc_api_provider_1.CcApiContextProviderPlugin(s),
};
//# sourceMappingURL=data:application/json;base64,