"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkGraphBuilder = void 0;
const cxapi = require("@aws-cdk/cx-api");
const cdk_assets_1 = require("cdk-assets");
const work_graph_1 = require("./work-graph");
const work_graph_types_1 = require("./work-graph-types");
const error_1 = require("../../toolkit/error");
const util_1 = require("../../util");
class WorkGraphBuilder {
    constructor(ioHelper, prebuildAssets, idPrefix = '') {
        this.prebuildAssets = prebuildAssets;
        this.idPrefix = idPrefix;
        this.graph = new work_graph_1.WorkGraph({}, ioHelper);
        this.ioHelper = ioHelper;
    }
    addStack(artifact) {
        this.graph.addNodes({
            type: 'stack',
            id: `${this.idPrefix}${artifact.id}`,
            dependencies: new Set(this.stackArtifactIds(onlyStacks(artifact.dependencies))),
            stack: artifact,
            deploymentState: work_graph_types_1.DeploymentState.PENDING,
            priority: WorkGraphBuilder.PRIORITIES.stack,
        });
    }
    /**
     * Oof, see this parameter list
     */
    // eslint-disable-next-line max-len
    addAsset(parentStack, assetManifestArtifact, assetManifest, asset) {
        // Just the artifact identifier
        const assetId = asset.id.assetId;
        const buildId = `build-${assetId}-${(0, util_1.contentHashAny)([assetId, asset.genericSource]).substring(0, 10)}`;
        const publishId = `publish-${assetId}-${(0, util_1.contentHashAny)([assetId, asset.genericDestination]).substring(0, 10)}`;
        // Build node only gets added once because they are all the same
        if (!this.graph.tryGetNode(buildId)) {
            const node = {
                type: 'asset-build',
                id: buildId,
                note: asset.displayName(false),
                dependencies: new Set([
                    ...this.stackArtifactIds(assetManifestArtifact.dependencies),
                    // If we disable prebuild, then assets inherit (stack) dependencies from their parent stack
                    ...!this.prebuildAssets ? this.stackArtifactIds(onlyStacks(parentStack.dependencies)) : [],
                ]),
                parentStack: parentStack,
                assetManifestArtifact,
                assetManifest,
                asset,
                deploymentState: work_graph_types_1.DeploymentState.PENDING,
                priority: WorkGraphBuilder.PRIORITIES['asset-build'],
            };
            this.graph.addNodes(node);
        }
        const publishNode = this.graph.tryGetNode(publishId);
        if (!publishNode) {
            this.graph.addNodes({
                type: 'asset-publish',
                id: publishId,
                note: asset.displayName(true),
                dependencies: new Set([
                    buildId,
                ]),
                parentStack,
                assetManifestArtifact,
                assetManifest,
                asset,
                deploymentState: work_graph_types_1.DeploymentState.PENDING,
                priority: WorkGraphBuilder.PRIORITIES['asset-publish'],
            });
        }
        for (const inheritedDep of this.stackArtifactIds(onlyStacks(parentStack.dependencies))) {
            // The asset publish step also depends on the stacks that the parent depends on.
            // This is purely cosmetic: if we don't do this, the progress printing of asset publishing
            // is going to interfere with the progress bar of the stack deployment. We could remove this
            // for overall faster deployments if we ever have a better method of progress displaying.
            // Note: this may introduce a cycle if one of the parent's dependencies is another stack that
            // depends on this asset. To workaround this we remove these cycles once all nodes have
            // been added to the graph.
            this.graph.addDependency(publishId, inheritedDep);
        }
        // This will work whether the stack node has been added yet or not
        this.graph.addDependency(`${this.idPrefix}${parentStack.id}`, publishId);
    }
    build(artifacts) {
        const parentStacks = stacksFromAssets(artifacts);
        for (const artifact of artifacts) {
            if (cxapi.CloudFormationStackArtifact.isCloudFormationStackArtifact(artifact)) {
                this.addStack(artifact);
            }
            else if (cxapi.AssetManifestArtifact.isAssetManifestArtifact(artifact)) {
                const manifest = cdk_assets_1.AssetManifest.fromFile(artifact.file);
                for (const entry of manifest.entries) {
                    const parentStack = parentStacks.get(artifact);
                    if (parentStack === undefined) {
                        throw new error_1.ToolkitError('Found an asset manifest that is not associated with a stack');
                    }
                    this.addAsset(parentStack, artifact, manifest, entry);
                }
            }
            else if (cxapi.NestedCloudAssemblyArtifact.isNestedCloudAssemblyArtifact(artifact)) {
                const assembly = new cxapi.CloudAssembly(artifact.fullPath, { topoSort: false });
                const nestedGraph = new WorkGraphBuilder(this.ioHelper, this.prebuildAssets, `${this.idPrefix}${artifact.id}.`).build(assembly.artifacts);
                this.graph.absorb(nestedGraph);
            }
            else {
                // Ignore whatever else
            }
        }
        this.graph.removeUnavailableDependencies();
        // Remove any potentially introduced cycles between asset publishing and the stacks that depend on them.
        this.removeStackPublishCycles();
        return this.graph;
    }
    stackArtifactIds(deps) {
        return deps.flatMap((d) => cxapi.CloudFormationStackArtifact.isCloudFormationStackArtifact(d) ? [this.stackArtifactId(d)] : []);
    }
    stackArtifactId(artifact) {
        if (!cxapi.CloudFormationStackArtifact.isCloudFormationStackArtifact(artifact)) {
            throw new error_1.ToolkitError(`Can only call this on CloudFormationStackArtifact, got: ${artifact.constructor.name}`);
        }
        return `${this.idPrefix}${artifact.id}`;
    }
    /**
     * We may have accidentally introduced cycles in an attempt to make the messages printed to the
     * console not interfere with each other too much. Remove them again.
     */
    removeStackPublishCycles() {
        const publishSteps = this.graph.nodesOfType('asset-publish');
        for (const publishStep of publishSteps) {
            for (const dep of publishStep.dependencies) {
                if (this.graph.reachable(dep, publishStep.id)) {
                    publishStep.dependencies.delete(dep);
                }
            }
        }
    }
}
exports.WorkGraphBuilder = WorkGraphBuilder;
/**
 * Default priorities for nodes
 *
 * Assets builds have higher priority than the other two operations, to make good on our promise that
 * '--prebuild-assets' will actually do assets before stacks (if it can). Unfortunately it is the
 * default :(
 *
 * But between stack dependencies and publish dependencies, stack dependencies go first
 */
WorkGraphBuilder.PRIORITIES = {
    'asset-build': 10,
    'asset-publish': 0,
    'stack': 5,
};
function stacksFromAssets(artifacts) {
    const ret = new Map();
    for (const stack of artifacts.filter(x => cxapi.CloudFormationStackArtifact.isCloudFormationStackArtifact(x))) {
        const assetArtifacts = stack.dependencies.filter((x) => cxapi.AssetManifestArtifact.isAssetManifestArtifact(x));
        for (const art of assetArtifacts) {
            ret.set(art, stack);
        }
    }
    return ret;
}
function onlyStacks(artifacts) {
    return artifacts.filter(x => cxapi.CloudFormationStackArtifact.isCloudFormationStackArtifact(x));
}
//# sourceMappingURL=data:application/json;base64,