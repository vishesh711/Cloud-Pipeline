"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployStack = deployStack;
exports.destroyStack = destroyStack;
const util_1 = require("util");
const chalk = require("chalk");
const uuid = require("uuid");
const asset_manifest_builder_1 = require("./asset-manifest-builder");
const asset_publishing_1 = require("./asset-publishing");
const assets_1 = require("./assets");
const checks_1 = require("./checks");
const cloudformation_1 = require("./cloudformation");
const hotswap_deployments_1 = require("./hotswap-deployments");
const private_1 = require("../../../../@aws-cdk/tmp-toolkit-helpers/src/api/io/private");
const error_1 = require("../../toolkit/error");
const util_2 = require("../../util");
const evaluate_cloudformation_template_1 = require("../evaluate-cloudformation-template");
const common_1 = require("../hotswap/common");
const stack_events_1 = require("../stack-events");
const template_body_parameter_1 = require("../util/template-body-parameter");
async function deployStack(options, ioHelper) {
    var _a, _b;
    const stackArtifact = options.stack;
    const stackEnv = options.resolvedEnvironment;
    options.sdk.appendCustomUserAgent(options.extraUserAgent);
    const cfn = options.sdk.cloudFormation();
    const deployName = options.deployName || stackArtifact.stackName;
    let cloudFormationStack = await cloudformation_1.CloudFormationStack.lookup(cfn, deployName);
    if (cloudFormationStack.stackStatus.isCreationFailure) {
        await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg(`Found existing stack ${deployName} that had previously failed creation. Deleting it before attempting to re-create it.`));
        await cfn.deleteStack({ StackName: deployName });
        const deletedStack = await (0, cloudformation_1.waitForStackDelete)(cfn, ioHelper, deployName);
        if (deletedStack && deletedStack.stackStatus.name !== 'DELETE_COMPLETE') {
            throw new error_1.ToolkitError(`Failed deleting stack ${deployName} that had previously failed creation (current state: ${deletedStack.stackStatus})`);
        }
        // Update variable to mark that the stack does not exist anymore, but avoid
        // doing an actual lookup in CloudFormation (which would be silly to do if
        // we just deleted it).
        cloudFormationStack = cloudformation_1.CloudFormationStack.doesNotExist(cfn, deployName);
    }
    // Detect "legacy" assets (which remain in the metadata) and publish them via
    // an ad-hoc asset manifest, while passing their locations via template
    // parameters.
    const legacyAssets = new asset_manifest_builder_1.AssetManifestBuilder();
    const assetParams = await (0, assets_1.addMetadataAssetsToManifest)(ioHelper, stackArtifact, legacyAssets, options.envResources, options.reuseAssets);
    const finalParameterValues = { ...options.parameters, ...assetParams };
    const templateParams = cloudformation_1.TemplateParameters.fromTemplate(stackArtifact.template);
    const stackParams = options.usePreviousParameters
        ? templateParams.updateExisting(finalParameterValues, cloudFormationStack.parameters)
        : templateParams.supplyAll(finalParameterValues);
    const hotswapMode = (_a = options.hotswap) !== null && _a !== void 0 ? _a : common_1.HotswapMode.FULL_DEPLOYMENT;
    const hotswapPropertyOverrides = (_b = options.hotswapPropertyOverrides) !== null && _b !== void 0 ? _b : new common_1.HotswapPropertyOverrides();
    if (await canSkipDeploy(options, cloudFormationStack, stackParams.hasChanges(cloudFormationStack.parameters), ioHelper)) {
        await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg(`${deployName}: skipping deployment (use --force to override)`));
        // if we can skip deployment and we are performing a hotswap, let the user know
        // that no hotswap deployment happened
        if (hotswapMode !== common_1.HotswapMode.FULL_DEPLOYMENT) {
            await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_INFO.msg((0, util_1.format)(`\n ${common_1.ICON} %s\n`, chalk.bold('hotswap deployment skipped - no changes were detected (use --force to override)'))));
        }
        return {
            type: 'did-deploy-stack',
            noOp: true,
            outputs: cloudFormationStack.outputs,
            stackArn: cloudFormationStack.stackId,
        };
    }
    else {
        await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg(`${deployName}: deploying...`));
    }
    const bodyParameter = await (0, template_body_parameter_1.makeBodyParameter)(stackArtifact, options.resolvedEnvironment, legacyAssets, options.envResources, options.overrideTemplate);
    let bootstrapStackName;
    try {
        bootstrapStackName = (await options.envResources.lookupToolkit()).stackName;
    }
    catch (e) {
        await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg(`Could not determine the bootstrap stack name: ${e}`));
    }
    await (0, asset_publishing_1.publishAssets)(legacyAssets.toManifest(stackArtifact.assembly.directory), options.sdkProvider, stackEnv, {
        parallel: options.assetParallelism,
        allowCrossAccount: await (0, checks_1.determineAllowCrossAccountAssetPublishing)(options.sdk, ioHelper, bootstrapStackName),
    }, ioHelper);
    if (hotswapMode !== common_1.HotswapMode.FULL_DEPLOYMENT) {
        // attempt to short-circuit the deployment if possible
        try {
            const hotswapDeploymentResult = await (0, hotswap_deployments_1.tryHotswapDeployment)(options.sdkProvider, ioHelper, stackParams.values, cloudFormationStack, stackArtifact, hotswapMode, hotswapPropertyOverrides);
            if (hotswapDeploymentResult) {
                return hotswapDeploymentResult;
            }
            await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_INFO.msg((0, util_1.format)('Could not perform a hotswap deployment, as the stack %s contains non-Asset changes', stackArtifact.displayName)));
        }
        catch (e) {
            if (!(e instanceof evaluate_cloudformation_template_1.CfnEvaluationException)) {
                throw e;
            }
            await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_INFO.msg((0, util_1.format)('Could not perform a hotswap deployment, because the CloudFormation template could not be resolved: %s', (0, util_2.formatErrorMessage)(e))));
        }
        if (hotswapMode === common_1.HotswapMode.FALL_BACK) {
            await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_INFO.msg('Falling back to doing a full deployment'));
            options.sdk.appendCustomUserAgent('cdk-hotswap/fallback');
        }
        else {
            return {
                type: 'did-deploy-stack',
                noOp: true,
                stackArn: cloudFormationStack.stackId,
                outputs: cloudFormationStack.outputs,
            };
        }
    }
    // could not short-circuit the deployment, perform a full CFN deploy instead
    const fullDeployment = new FullCloudFormationDeployment(options, cloudFormationStack, stackArtifact, stackParams, bodyParameter, ioHelper);
    return fullDeployment.performDeployment();
}
/**
 * This class shares state and functionality between the different full deployment modes
 */
class FullCloudFormationDeployment {
    constructor(options, cloudFormationStack, stackArtifact, stackParams, bodyParameter, ioHelper) {
        var _a;
        this.options = options;
        this.cloudFormationStack = cloudFormationStack;
        this.stackArtifact = stackArtifact;
        this.stackParams = stackParams;
        this.bodyParameter = bodyParameter;
        this.ioHelper = ioHelper;
        this.cfn = options.sdk.cloudFormation();
        this.stackName = (_a = options.deployName) !== null && _a !== void 0 ? _a : stackArtifact.stackName;
        this.update = cloudFormationStack.exists && cloudFormationStack.stackStatus.name !== 'REVIEW_IN_PROGRESS';
        this.verb = this.update ? 'update' : 'create';
        this.uuid = uuid.v4();
    }
    async performDeployment() {
        var _a;
        const deploymentMethod = (_a = this.options.deploymentMethod) !== null && _a !== void 0 ? _a : {
            method: 'change-set',
        };
        if (deploymentMethod.method === 'direct' && this.options.resourcesToImport) {
            throw new error_1.ToolkitError('Importing resources requires a changeset deployment');
        }
        switch (deploymentMethod.method) {
            case 'change-set':
                return this.changeSetDeployment(deploymentMethod);
            case 'direct':
                return this.directDeployment();
        }
    }
    async changeSetDeployment(deploymentMethod) {
        var _a, _b, _c, _d;
        const changeSetName = (_a = deploymentMethod.changeSetName) !== null && _a !== void 0 ? _a : 'cdk-deploy-change-set';
        const execute = (_b = deploymentMethod.execute) !== null && _b !== void 0 ? _b : true;
        const importExistingResources = (_c = deploymentMethod.importExistingResources) !== null && _c !== void 0 ? _c : false;
        const changeSetDescription = await this.createChangeSet(changeSetName, execute, importExistingResources);
        await this.updateTerminationProtection();
        if ((0, cloudformation_1.changeSetHasNoChanges)(changeSetDescription)) {
            await this.ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg((0, util_1.format)('No changes are to be performed on %s.', this.stackName)));
            if (execute) {
                await this.ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg((0, util_1.format)('Deleting empty change set %s', changeSetDescription.ChangeSetId)));
                await this.cfn.deleteChangeSet({
                    StackName: this.stackName,
                    ChangeSetName: changeSetName,
                });
            }
            if (this.options.force) {
                await this.ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_WARN.msg([
                    'You used the --force flag, but CloudFormation reported that the deployment would not make any changes.',
                    'According to CloudFormation, all resources are already up-to-date with the state in your CDK app.',
                    '',
                    'You cannot use the --force flag to get rid of changes you made in the console. Try using',
                    'CloudFormation drift detection instead: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html',
                ].join('\n')));
            }
            return {
                type: 'did-deploy-stack',
                noOp: true,
                outputs: this.cloudFormationStack.outputs,
                stackArn: changeSetDescription.StackId,
            };
        }
        if (!execute) {
            await this.ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_INFO.msg((0, util_1.format)('Changeset %s created and waiting in review for manual execution (--no-execute)', changeSetDescription.ChangeSetId)));
            return {
                type: 'did-deploy-stack',
                noOp: false,
                outputs: this.cloudFormationStack.outputs,
                stackArn: changeSetDescription.StackId,
            };
        }
        // If there are replacements in the changeset, check the rollback flag and stack status
        const replacement = hasReplacement(changeSetDescription);
        const isPausedFailState = this.cloudFormationStack.stackStatus.isRollbackable;
        const rollback = (_d = this.options.rollback) !== null && _d !== void 0 ? _d : true;
        if (isPausedFailState && replacement) {
            return { type: 'failpaused-need-rollback-first', reason: 'replacement', status: this.cloudFormationStack.stackStatus.name };
        }
        if (isPausedFailState && rollback) {
            return { type: 'failpaused-need-rollback-first', reason: 'not-norollback', status: this.cloudFormationStack.stackStatus.name };
        }
        if (!rollback && replacement) {
            return { type: 'replacement-requires-rollback' };
        }
        return this.executeChangeSet(changeSetDescription);
    }
    async createChangeSet(changeSetName, willExecute, importExistingResources) {
        await this.cleanupOldChangeset(changeSetName);
        await this.ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg(`Attempting to create ChangeSet with name ${changeSetName} to ${this.verb} stack ${this.stackName}`));
        await this.ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_INFO.msg((0, util_1.format)('%s: creating CloudFormation changeset...', chalk.bold(this.stackName))));
        const changeSet = await this.cfn.createChangeSet({
            StackName: this.stackName,
            ChangeSetName: changeSetName,
            ChangeSetType: this.options.resourcesToImport ? 'IMPORT' : this.update ? 'UPDATE' : 'CREATE',
            ResourcesToImport: this.options.resourcesToImport,
            Description: `CDK Changeset for execution ${this.uuid}`,
            ClientToken: `create${this.uuid}`,
            ImportExistingResources: importExistingResources,
            ...this.commonPrepareOptions(),
        });
        await this.ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg((0, util_1.format)('Initiated creation of changeset: %s; waiting for it to finish creating...', changeSet.Id)));
        // Fetching all pages if we'll execute, so we can have the correct change count when monitoring.
        return (0, cloudformation_1.waitForChangeSet)(this.cfn, this.ioHelper, this.stackName, changeSetName, {
            fetchAll: willExecute,
        });
    }
    async executeChangeSet(changeSet) {
        var _a;
        await this.ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg((0, util_1.format)('Initiating execution of changeset %s on stack %s', changeSet.ChangeSetId, this.stackName)));
        await this.cfn.executeChangeSet({
            StackName: this.stackName,
            ChangeSetName: changeSet.ChangeSetName,
            ClientRequestToken: `exec${this.uuid}`,
            ...this.commonExecuteOptions(),
        });
        await this.ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg((0, util_1.format)('Execution of changeset %s on stack %s has started; waiting for the update to complete...', changeSet.ChangeSetId, this.stackName)));
        // +1 for the extra event emitted from updates.
        const changeSetLength = ((_a = changeSet.Changes) !== null && _a !== void 0 ? _a : []).length + (this.update ? 1 : 0);
        return this.monitorDeployment(changeSet.CreationTime, changeSetLength);
    }
    async cleanupOldChangeset(changeSetName) {
        if (this.cloudFormationStack.exists) {
            // Delete any existing change sets generated by CDK since change set names must be unique.
            // The delete request is successful as long as the stack exists (even if the change set does not exist).
            await this.ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg(`Removing existing change set with name ${changeSetName} if it exists`));
            await this.cfn.deleteChangeSet({
                StackName: this.stackName,
                ChangeSetName: changeSetName,
            });
        }
    }
    async updateTerminationProtection() {
        var _a;
        // Update termination protection only if it has changed.
        const terminationProtection = (_a = this.stackArtifact.terminationProtection) !== null && _a !== void 0 ? _a : false;
        if (!!this.cloudFormationStack.terminationProtection !== terminationProtection) {
            await this.ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg((0, util_1.format)('Updating termination protection from %s to %s for stack %s', this.cloudFormationStack.terminationProtection, terminationProtection, this.stackName)));
            await this.cfn.updateTerminationProtection({
                StackName: this.stackName,
                EnableTerminationProtection: terminationProtection,
            });
            await this.ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg((0, util_1.format)('Termination protection updated to %s for stack %s', terminationProtection, this.stackName)));
        }
    }
    async directDeployment() {
        var _a;
        await this.ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_INFO.msg((0, util_1.format)('%s: %s stack...', chalk.bold(this.stackName), this.update ? 'updating' : 'creating')));
        const startTime = new Date();
        if (this.update) {
            await this.updateTerminationProtection();
            try {
                await this.cfn.updateStack({
                    StackName: this.stackName,
                    ClientRequestToken: `update${this.uuid}`,
                    ...this.commonPrepareOptions(),
                    ...this.commonExecuteOptions(),
                });
            }
            catch (err) {
                if (err.message === 'No updates are to be performed.') {
                    await this.ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg((0, util_1.format)('No updates are to be performed for stack %s', this.stackName)));
                    return {
                        type: 'did-deploy-stack',
                        noOp: true,
                        outputs: this.cloudFormationStack.outputs,
                        stackArn: this.cloudFormationStack.stackId,
                    };
                }
                throw err;
            }
            return this.monitorDeployment(startTime, undefined);
        }
        else {
            // Take advantage of the fact that we can set termination protection during create
            const terminationProtection = (_a = this.stackArtifact.terminationProtection) !== null && _a !== void 0 ? _a : false;
            await this.cfn.createStack({
                StackName: this.stackName,
                ClientRequestToken: `create${this.uuid}`,
                ...(terminationProtection ? { EnableTerminationProtection: true } : undefined),
                ...this.commonPrepareOptions(),
                ...this.commonExecuteOptions(),
            });
            return this.monitorDeployment(startTime, undefined);
        }
    }
    async monitorDeployment(startTime, expectedChanges) {
        const monitor = new stack_events_1.StackActivityMonitor({
            cfn: this.cfn,
            stack: this.stackArtifact,
            stackName: this.stackName,
            resourcesTotal: expectedChanges,
            ioHelper: this.ioHelper,
            changeSetCreationTime: startTime,
        });
        await monitor.start();
        let finalState = this.cloudFormationStack;
        try {
            const successStack = await (0, cloudformation_1.waitForStackDeploy)(this.cfn, this.ioHelper, this.stackName);
            // This shouldn't really happen, but catch it anyway. You never know.
            if (!successStack) {
                throw new error_1.ToolkitError('Stack deploy failed (the stack disappeared while we were deploying it)');
            }
            finalState = successStack;
        }
        catch (e) {
            throw new error_1.ToolkitError(suffixWithErrors((0, util_2.formatErrorMessage)(e), monitor.errors));
        }
        finally {
            await monitor.stop();
        }
        await this.ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg((0, util_1.format)('Stack %s has completed updating', this.stackName)));
        return {
            type: 'did-deploy-stack',
            noOp: false,
            outputs: finalState.outputs,
            stackArn: finalState.stackId,
        };
    }
    /**
     * Return the options that are shared between CreateStack, UpdateStack and CreateChangeSet
     */
    commonPrepareOptions() {
        return {
            Capabilities: ['CAPABILITY_IAM', 'CAPABILITY_NAMED_IAM', 'CAPABILITY_AUTO_EXPAND'],
            NotificationARNs: this.options.notificationArns,
            Parameters: this.stackParams.apiParameters,
            RoleARN: this.options.roleArn,
            TemplateBody: this.bodyParameter.TemplateBody,
            TemplateURL: this.bodyParameter.TemplateURL,
            Tags: this.options.tags,
        };
    }
    /**
     * Return the options that are shared between UpdateStack and CreateChangeSet
     *
     * Be careful not to add in keys for options that aren't used, as the features may not have been
     * deployed everywhere yet.
     */
    commonExecuteOptions() {
        const shouldDisableRollback = this.options.rollback === false;
        return {
            StackName: this.stackName,
            ...(shouldDisableRollback ? { DisableRollback: true } : undefined),
        };
    }
}
async function destroyStack(options, ioHelper) {
    const deployName = options.deployName || options.stack.stackName;
    const cfn = options.sdk.cloudFormation();
    const currentStack = await cloudformation_1.CloudFormationStack.lookup(cfn, deployName);
    if (!currentStack.exists) {
        return;
    }
    const monitor = new stack_events_1.StackActivityMonitor({
        cfn,
        stack: options.stack,
        stackName: deployName,
        ioHelper: ioHelper,
    });
    await monitor.start();
    try {
        await cfn.deleteStack({ StackName: deployName, RoleARN: options.roleArn });
        const destroyedStack = await (0, cloudformation_1.waitForStackDelete)(cfn, ioHelper, deployName);
        if (destroyedStack && destroyedStack.stackStatus.name !== 'DELETE_COMPLETE') {
            throw new error_1.ToolkitError(`Failed to destroy ${deployName}: ${destroyedStack.stackStatus}`);
        }
    }
    catch (e) {
        throw new error_1.ToolkitError(suffixWithErrors((0, util_2.formatErrorMessage)(e), monitor.errors));
    }
    finally {
        if (monitor) {
            await monitor.stop();
        }
    }
}
/**
 * Checks whether we can skip deployment
 *
 * We do this in a complicated way by preprocessing (instead of just
 * looking at the changeset), because if there are nested stacks involved
 * the changeset will always show the nested stacks as needing to be
 * updated, and the deployment will take a long time to in effect not
 * do anything.
 */
async function canSkipDeploy(deployStackOptions, cloudFormationStack, parameterChanges, ioHelper) {
    var _a, _b, _c;
    const deployName = deployStackOptions.deployName || deployStackOptions.stack.stackName;
    await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg(`${deployName}: checking if we can skip deploy`));
    // Forced deploy
    if (deployStackOptions.force) {
        await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg(`${deployName}: forced deployment`));
        return false;
    }
    // Creating changeset only (default true), never skip
    if (((_a = deployStackOptions.deploymentMethod) === null || _a === void 0 ? void 0 : _a.method) === 'change-set' &&
        deployStackOptions.deploymentMethod.execute === false) {
        await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg(`${deployName}: --no-execute, always creating change set`));
        return false;
    }
    // No existing stack
    if (!cloudFormationStack.exists) {
        await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg(`${deployName}: no existing stack`));
        return false;
    }
    // Template has changed (assets taken into account here)
    if (JSON.stringify(deployStackOptions.stack.template) !== JSON.stringify(await cloudFormationStack.template())) {
        await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg(`${deployName}: template has changed`));
        return false;
    }
    // Tags have changed
    if (!compareTags(cloudFormationStack.tags, (_b = deployStackOptions.tags) !== null && _b !== void 0 ? _b : [])) {
        await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg(`${deployName}: tags have changed`));
        return false;
    }
    // Notification arns have changed
    if (!arrayEquals(cloudFormationStack.notificationArns, (_c = deployStackOptions.notificationArns) !== null && _c !== void 0 ? _c : [])) {
        await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg(`${deployName}: notification arns have changed`));
        return false;
    }
    // Termination protection has been updated
    if (!!deployStackOptions.stack.terminationProtection !== !!cloudFormationStack.terminationProtection) {
        await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg(`${deployName}: termination protection has been updated`));
        return false;
    }
    // Parameters have changed
    if (parameterChanges) {
        if (parameterChanges === 'ssm') {
            await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg(`${deployName}: some parameters come from SSM so we have to assume they may have changed`));
        }
        else {
            await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg(`${deployName}: parameters have changed`));
        }
        return false;
    }
    // Existing stack is in a failed state
    if (cloudFormationStack.stackStatus.isFailure) {
        await ioHelper.notify(private_1.IO.DEFAULT_TOOLKIT_DEBUG.msg(`${deployName}: stack is in a failure state`));
        return false;
    }
    // We can skip deploy
    return true;
}
/**
 * Compares two list of tags, returns true if identical.
 */
function compareTags(a, b) {
    if (a.length !== b.length) {
        return false;
    }
    for (const aTag of a) {
        const bTag = b.find((tag) => tag.Key === aTag.Key);
        if (!bTag || bTag.Value !== aTag.Value) {
            return false;
        }
    }
    return true;
}
function suffixWithErrors(msg, errors) {
    return errors && errors.length > 0 ? `${msg}: ${errors.join(', ')}` : msg;
}
function arrayEquals(a, b) {
    return a.every((item) => b.includes(item)) && b.every((item) => a.includes(item));
}
function hasReplacement(cs) {
    var _a;
    return ((_a = cs.Changes) !== null && _a !== void 0 ? _a : []).some(c => {
        var _a;
        const a = (_a = c.ResourceChange) === null || _a === void 0 ? void 0 : _a.PolicyAction;
        return a === 'ReplaceAndDelete' || a === 'ReplaceAndRetain' || a === 'ReplaceAndSnapshot';
    });
}
//# sourceMappingURL=data:application/json;base64,