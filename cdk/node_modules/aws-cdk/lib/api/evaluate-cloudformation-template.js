"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvaluateCloudFormationTemplate = exports.CfnEvaluationException = exports.LazyLookupExport = exports.LookupExportError = exports.LazyListStackResources = void 0;
const resource_metadata_1 = require("../../../@aws-cdk/tmp-toolkit-helpers/src/api/resource-metadata/resource-metadata");
const error_1 = require("../toolkit/error");
class LazyListStackResources {
    constructor(sdk, stackName) {
        this.sdk = sdk;
        this.stackName = stackName;
    }
    async listStackResources() {
        if (this.stackResources === undefined) {
            this.stackResources = this.sdk.cloudFormation().listStackResources({
                StackName: this.stackName,
            });
        }
        return this.stackResources;
    }
}
exports.LazyListStackResources = LazyListStackResources;
class LookupExportError extends Error {
}
exports.LookupExportError = LookupExportError;
class LazyLookupExport {
    constructor(sdk) {
        this.sdk = sdk;
        this.cachedExports = {};
    }
    async lookupExport(name) {
        if (this.cachedExports[name]) {
            return this.cachedExports[name];
        }
        for await (const cfnExport of this.listExports()) {
            if (!cfnExport.Name) {
                continue; // ignore any result that omits a name
            }
            this.cachedExports[cfnExport.Name] = cfnExport;
            if (cfnExport.Name === name) {
                return cfnExport;
            }
        }
        return undefined; // export not found
    }
    // TODO: Paginate
    async *listExports() {
        var _a;
        let nextToken = undefined;
        while (true) {
            const response = await this.sdk.cloudFormation().listExports({ NextToken: nextToken });
            for (const cfnExport of (_a = response.Exports) !== null && _a !== void 0 ? _a : []) {
                yield cfnExport;
            }
            if (!response.NextToken) {
                return;
            }
            nextToken = response.NextToken;
        }
    }
}
exports.LazyLookupExport = LazyLookupExport;
class CfnEvaluationException extends Error {
}
exports.CfnEvaluationException = CfnEvaluationException;
class EvaluateCloudFormationTemplate {
    constructor(props) {
        var _a, _b, _c;
        this.stackArtifact = props.stackArtifact;
        this.stackName = (_a = props.stackName) !== null && _a !== void 0 ? _a : props.stackArtifact.stackName;
        this.template = (_b = props.template) !== null && _b !== void 0 ? _b : props.stackArtifact.template;
        this.context = {
            'AWS::AccountId': props.account,
            'AWS::Region': props.region,
            'AWS::Partition': props.partition,
            ...props.parameters,
        };
        this.account = props.account;
        this.region = props.region;
        this.partition = props.partition;
        this.sdk = props.sdk;
        // We need names of nested stack so we can evaluate cross stack references
        this.nestedStacks = (_c = props.nestedStacks) !== null && _c !== void 0 ? _c : {};
        // The current resources of the Stack.
        // We need them to figure out the physical name of a resource in case it wasn't specified by the user.
        // We fetch it lazily, to save a service call, in case all hotswapped resources have their physical names set.
        this.stackResources = new LazyListStackResources(this.sdk, this.stackName);
        // CloudFormation Exports lookup to be able to resolve Fn::ImportValue intrinsics in template
        this.lookupExport = new LazyLookupExport(this.sdk);
    }
    // clones current EvaluateCloudFormationTemplate object, but updates the stack name
    async createNestedEvaluateCloudFormationTemplate(stackName, nestedTemplate, nestedStackParameters) {
        const evaluatedParams = await this.evaluateCfnExpression(nestedStackParameters);
        return new EvaluateCloudFormationTemplate({
            stackArtifact: this.stackArtifact,
            stackName,
            template: nestedTemplate,
            parameters: evaluatedParams,
            account: this.account,
            region: this.region,
            partition: this.partition,
            sdk: this.sdk,
            nestedStacks: this.nestedStacks,
        });
    }
    async establishResourcePhysicalName(logicalId, physicalNameInCfnTemplate) {
        if (physicalNameInCfnTemplate != null) {
            try {
                return await this.evaluateCfnExpression(physicalNameInCfnTemplate);
            }
            catch (e) {
                // If we can't evaluate the resource's name CloudFormation expression,
                // just look it up in the currently deployed Stack
                if (!(e instanceof CfnEvaluationException)) {
                    throw e;
                }
            }
        }
        return this.findPhysicalNameFor(logicalId);
    }
    async findPhysicalNameFor(logicalId) {
        var _a;
        const stackResources = await this.stackResources.listStackResources();
        return (_a = stackResources.find((sr) => sr.LogicalResourceId === logicalId)) === null || _a === void 0 ? void 0 : _a.PhysicalResourceId;
    }
    async findLogicalIdForPhysicalName(physicalName) {
        var _a;
        const stackResources = await this.stackResources.listStackResources();
        return (_a = stackResources.find((sr) => sr.PhysicalResourceId === physicalName)) === null || _a === void 0 ? void 0 : _a.LogicalResourceId;
    }
    findReferencesTo(logicalId) {
        var _a, _b;
        const ret = new Array();
        for (const [resourceLogicalId, resourceDef] of Object.entries((_b = (_a = this.template) === null || _a === void 0 ? void 0 : _a.Resources) !== null && _b !== void 0 ? _b : {})) {
            if (logicalId !== resourceLogicalId && this.references(logicalId, resourceDef)) {
                ret.push({
                    ...resourceDef,
                    LogicalId: resourceLogicalId,
                });
            }
        }
        return ret;
    }
    async evaluateCfnExpression(cfnExpression) {
        const self = this;
        /**
         * Evaluates CloudFormation intrinsic functions
         *
         * Note that supported intrinsic functions are documented in README.md -- please update
         * list of supported functions when adding new evaluations
         *
         * See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html
         */
        class CfnIntrinsics {
            evaluateIntrinsic(intrinsic) {
                const intrinsicFunc = this[intrinsic.name];
                if (!intrinsicFunc) {
                    throw new CfnEvaluationException(`CloudFormation function ${intrinsic.name} is not supported`);
                }
                const argsAsArray = Array.isArray(intrinsic.args) ? intrinsic.args : [intrinsic.args];
                return intrinsicFunc.apply(this, argsAsArray);
            }
            async 'Fn::Join'(separator, args) {
                const evaluatedArgs = await self.evaluateCfnExpression(args);
                return evaluatedArgs.join(separator);
            }
            async 'Fn::Split'(separator, args) {
                const evaluatedArgs = await self.evaluateCfnExpression(args);
                return evaluatedArgs.split(separator);
            }
            async 'Fn::Select'(index, args) {
                const evaluatedArgs = await self.evaluateCfnExpression(args);
                return evaluatedArgs[index];
            }
            async Ref(logicalId) {
                const refTarget = await self.findRefTarget(logicalId);
                if (refTarget) {
                    return refTarget;
                }
                else {
                    throw new CfnEvaluationException(`Parameter or resource '${logicalId}' could not be found for evaluation`);
                }
            }
            async 'Fn::GetAtt'(logicalId, attributeName) {
                // ToDo handle the 'logicalId.attributeName' form of Fn::GetAtt
                const attrValue = await self.findGetAttTarget(logicalId, attributeName);
                if (attrValue) {
                    return attrValue;
                }
                else {
                    throw new CfnEvaluationException(`Attribute '${attributeName}' of resource '${logicalId}' could not be found for evaluation`);
                }
            }
            async 'Fn::Sub'(template, explicitPlaceholders) {
                const placeholders = explicitPlaceholders ? await self.evaluateCfnExpression(explicitPlaceholders) : {};
                return asyncGlobalReplace(template, /\${([^}]*)}/g, (key) => {
                    if (key in placeholders) {
                        return placeholders[key];
                    }
                    else {
                        const splitKey = key.split('.');
                        return splitKey.length === 1 ? this.Ref(key) : this['Fn::GetAtt'](splitKey[0], splitKey.slice(1).join('.'));
                    }
                });
            }
            async 'Fn::ImportValue'(name) {
                const exported = await self.lookupExport.lookupExport(name);
                if (!exported) {
                    throw new CfnEvaluationException(`Export '${name}' could not be found for evaluation`);
                }
                if (!exported.Value) {
                    throw new CfnEvaluationException(`Export '${name}' exists without a value`);
                }
                return exported.Value;
            }
        }
        if (cfnExpression == null) {
            return cfnExpression;
        }
        if (Array.isArray(cfnExpression)) {
            // Small arrays in practice
            // eslint-disable-next-line @cdklabs/promiseall-no-unbounded-parallelism
            return Promise.all(cfnExpression.map((expr) => this.evaluateCfnExpression(expr)));
        }
        if (typeof cfnExpression === 'object') {
            const intrinsic = this.parseIntrinsic(cfnExpression);
            if (intrinsic) {
                return new CfnIntrinsics().evaluateIntrinsic(intrinsic);
            }
            else {
                const ret = {};
                for (const [key, val] of Object.entries(cfnExpression)) {
                    ret[key] = await this.evaluateCfnExpression(val);
                }
                return ret;
            }
        }
        return cfnExpression;
    }
    getResourceProperty(logicalId, propertyName) {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.template.Resources) === null || _a === void 0 ? void 0 : _a[logicalId]) === null || _b === void 0 ? void 0 : _b.Properties) === null || _c === void 0 ? void 0 : _c[propertyName];
    }
    metadataFor(logicalId) {
        return (0, resource_metadata_1.resourceMetadata)(this.stackArtifact, logicalId);
    }
    references(logicalId, templateElement) {
        if (typeof templateElement === 'string') {
            return logicalId === templateElement;
        }
        if (templateElement == null) {
            return false;
        }
        if (Array.isArray(templateElement)) {
            return templateElement.some((el) => this.references(logicalId, el));
        }
        if (typeof templateElement === 'object') {
            return Object.values(templateElement).some((el) => this.references(logicalId, el));
        }
        return false;
    }
    parseIntrinsic(x) {
        const keys = Object.keys(x);
        if (keys.length === 1 && (keys[0].startsWith('Fn::') || keys[0] === 'Ref')) {
            return {
                name: keys[0],
                args: x[keys[0]],
            };
        }
        return undefined;
    }
    async findRefTarget(logicalId) {
        var _a, _b;
        // first, check to see if the Ref is a Parameter who's value we have
        if (logicalId === 'AWS::URLSuffix') {
            if (!this.cachedUrlSuffix) {
                this.cachedUrlSuffix = await this.sdk.getUrlSuffix(this.region);
            }
            return this.cachedUrlSuffix;
        }
        // Try finding the ref in the passed in parameters
        const parameterTarget = this.context[logicalId];
        if (parameterTarget) {
            return parameterTarget;
        }
        // If not in the passed in parameters, see if there is a default value in the template parameter that was not passed in
        const defaultParameterValue = (_b = (_a = this.template.Parameters) === null || _a === void 0 ? void 0 : _a[logicalId]) === null || _b === void 0 ? void 0 : _b.Default;
        if (defaultParameterValue) {
            return defaultParameterValue;
        }
        // if it's not a Parameter, we need to search in the current Stack resources
        return this.findGetAttTarget(logicalId);
    }
    async findGetAttTarget(logicalId, attribute) {
        var _a;
        // Handle case where the attribute is referencing a stack output (used in nested stacks to share parameters)
        // See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-cloudformation.html#w2ab1c17c23c19b5
        if (logicalId === 'Outputs' && attribute) {
            return this.evaluateCfnExpression((_a = this.template.Outputs[attribute]) === null || _a === void 0 ? void 0 : _a.Value);
        }
        const stackResources = await this.stackResources.listStackResources();
        const foundResource = stackResources.find((sr) => sr.LogicalResourceId === logicalId);
        if (!foundResource) {
            return undefined;
        }
        if (foundResource.ResourceType == 'AWS::CloudFormation::Stack' && (attribute === null || attribute === void 0 ? void 0 : attribute.startsWith('Outputs.'))) {
            const dependantStack = this.findNestedStack(logicalId, this.nestedStacks);
            if (!dependantStack || !dependantStack.physicalName) {
                // this is a newly created nested stack and cannot be hotswapped
                return undefined;
            }
            const evaluateCfnTemplate = await this.createNestedEvaluateCloudFormationTemplate(dependantStack.physicalName, dependantStack.generatedTemplate, dependantStack.generatedTemplate.Parameters);
            // Split Outputs.<refName> into 'Outputs' and '<refName>' and recursively call evaluate
            return evaluateCfnTemplate.evaluateCfnExpression({
                'Fn::GetAtt': attribute.split(/\.(.*)/s),
            });
        }
        // now, we need to format the appropriate identifier depending on the resource type,
        // and the requested attribute name
        return this.formatResourceAttribute(foundResource, attribute);
    }
    findNestedStack(logicalId, nestedStacks) {
        for (const nestedStackLogicalId of Object.keys(nestedStacks)) {
            if (nestedStackLogicalId === logicalId) {
                return nestedStacks[nestedStackLogicalId];
            }
            const checkInNestedChildStacks = this.findNestedStack(logicalId, nestedStacks[nestedStackLogicalId].nestedStackTemplates);
            if (checkInNestedChildStacks)
                return checkInNestedChildStacks;
        }
        return undefined;
    }
    formatResourceAttribute(resource, attribute) {
        const physicalId = resource.PhysicalResourceId;
        // no attribute means Ref expression, for which we use the physical ID directly
        if (!attribute) {
            return physicalId;
        }
        const resourceTypeFormats = RESOURCE_TYPE_ATTRIBUTES_FORMATS[resource.ResourceType];
        if (!resourceTypeFormats) {
            throw new CfnEvaluationException(`We don't support attributes of the '${resource.ResourceType}' resource. This is a CDK limitation. ` +
                'Please report it at https://github.com/aws/aws-cdk/issues/new/choose');
        }
        const attributeFmtFunc = resourceTypeFormats[attribute];
        if (!attributeFmtFunc) {
            throw new CfnEvaluationException(`We don't support the '${attribute}' attribute of the '${resource.ResourceType}' resource. This is a CDK limitation. ` +
                'Please report it at https://github.com/aws/aws-cdk/issues/new/choose');
        }
        const service = this.getServiceOfResource(resource);
        const resourceTypeArnPart = this.getResourceTypeArnPartOfResource(resource);
        return attributeFmtFunc({
            partition: this.partition,
            service,
            region: this.region,
            account: this.account,
            resourceType: resourceTypeArnPart,
            resourceName: physicalId,
        });
    }
    getServiceOfResource(resource) {
        return resource.ResourceType.split('::')[1].toLowerCase();
    }
    getResourceTypeArnPartOfResource(resource) {
        var _a;
        const resourceType = resource.ResourceType;
        const specialCaseResourceType = (_a = RESOURCE_TYPE_SPECIAL_NAMES[resourceType]) === null || _a === void 0 ? void 0 : _a.resourceType;
        return specialCaseResourceType
            ? specialCaseResourceType
            : // this is the default case
                resourceType.split('::')[2].toLowerCase();
    }
}
exports.EvaluateCloudFormationTemplate = EvaluateCloudFormationTemplate;
/**
 * Usually, we deduce the names of the service and the resource type used to format the ARN from the CloudFormation resource type.
 * For a CFN type like AWS::Service::ResourceType, the second segment becomes the service name, and the third the resource type
 * (after converting both of them to lowercase).
 * However, some resource types break this simple convention, and we need to special-case them.
 * This map is for storing those cases.
 */
const RESOURCE_TYPE_SPECIAL_NAMES = {
    'AWS::Events::EventBus': {
        resourceType: 'event-bus',
    },
};
const RESOURCE_TYPE_ATTRIBUTES_FORMATS = {
    'AWS::IAM::Role': { Arn: iamArnFmt },
    'AWS::IAM::User': { Arn: iamArnFmt },
    'AWS::IAM::Group': { Arn: iamArnFmt },
    'AWS::S3::Bucket': { Arn: s3ArnFmt },
    'AWS::Lambda::Function': { Arn: stdColonResourceArnFmt },
    'AWS::Events::EventBus': {
        Arn: stdSlashResourceArnFmt,
        // the name attribute of the EventBus is the same as the Ref
        Name: (parts) => parts.resourceName,
    },
    'AWS::DynamoDB::Table': { Arn: stdSlashResourceArnFmt },
    'AWS::AppSync::GraphQLApi': { ApiId: appsyncGraphQlApiApiIdFmt },
    'AWS::AppSync::FunctionConfiguration': {
        FunctionId: appsyncGraphQlFunctionIDFmt,
    },
    'AWS::AppSync::DataSource': { Name: appsyncGraphQlDataSourceNameFmt },
    'AWS::KMS::Key': { Arn: stdSlashResourceArnFmt },
};
function iamArnFmt(parts) {
    // we skip region for IAM resources
    return `arn:${parts.partition}:${parts.service}::${parts.account}:${parts.resourceType}/${parts.resourceName}`;
}
function s3ArnFmt(parts) {
    // we skip account, region and resourceType for S3 resources
    return `arn:${parts.partition}:${parts.service}:::${parts.resourceName}`;
}
function stdColonResourceArnFmt(parts) {
    // this is a standard format for ARNs like: arn:aws:service:region:account:resourceType:resourceName
    return `arn:${parts.partition}:${parts.service}:${parts.region}:${parts.account}:${parts.resourceType}:${parts.resourceName}`;
}
function stdSlashResourceArnFmt(parts) {
    // this is a standard format for ARNs like: arn:aws:service:region:account:resourceType/resourceName
    return `arn:${parts.partition}:${parts.service}:${parts.region}:${parts.account}:${parts.resourceType}/${parts.resourceName}`;
}
function appsyncGraphQlApiApiIdFmt(parts) {
    // arn:aws:appsync:us-east-1:111111111111:apis/<apiId>
    return parts.resourceName.split('/')[1];
}
function appsyncGraphQlFunctionIDFmt(parts) {
    // arn:aws:appsync:us-east-1:111111111111:apis/<apiId>/functions/<functionId>
    return parts.resourceName.split('/')[3];
}
function appsyncGraphQlDataSourceNameFmt(parts) {
    // arn:aws:appsync:us-east-1:111111111111:apis/<apiId>/datasources/<name>
    return parts.resourceName.split('/')[3];
}
async function asyncGlobalReplace(str, regex, cb) {
    if (!regex.global) {
        throw new error_1.ToolkitError('Regex must be created with /g flag');
    }
    const ret = new Array();
    let start = 0;
    while (true) {
        const match = regex.exec(str);
        if (!match) {
            break;
        }
        ret.push(str.substring(start, match.index));
        ret.push(await cb(match[1]));
        start = regex.lastIndex;
    }
    ret.push(str.slice(start));
    return ret.join('');
}
//# sourceMappingURL=data:application/json;base64,